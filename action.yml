name: 'bpfvalidator'
description: 'Run eBPF programs against a range of kernels.'
branding:
  icon: 'box'
  color: 'green'

inputs:
  cmd:
    description: 'command to run in qemu machines'
    required: true
  kernels:
    description: 'comma-separated list of kernels to be tested'
    required: true
  parallel:
    description: 'number of parallel vng instances to run'
    required: false
    default: 1
  kvm:
    description: 'enable KVM support (default: true)'
    required: false
    default: true
    type: boolean
  upload_report:
    description: 'name of the report file to upload (default: ""). If set to "" no report will be uploaded.'
    required: false
    default: ""

outputs:
  report:
    description: "Report of the run"
    value: ${{ steps.store-outputs.outputs.report }}

runs:
  using: "composite"
  steps:
    - name: Install deps
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y git qemu-system udev virtiofsd

    - name: KVM support
      shell: bash
      if: inputs.kvm == 'true'
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        sudo apt install -y qemu-kvm kmod

    - name: Build bpfvalidator
      shell: bash
      working-directory: ${{ github.action_path }}
      run: go build .

    # we hardcode the vng version here, since dependencies and build process could change
    - name: Install vng
      shell: bash
      run: |
        git clone --single-branch --branch v1.36 --depth 1 --recurse-submodules https://github.com/arighi/virtme-ng.git
        cd virtme-ng/
        BUILD_VIRTME_NG_INIT=1 pip3 install . --break-system-packages
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Generate bpfvalidator config
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        echo "vng_path: \"vng\"" > conf.yaml
        echo "bin_command: \"${{ inputs.cmd }}\"" >> conf.yaml
        echo "parallel: ${{ inputs.parallel }}" >> conf.yaml
        echo "kernel_versions: [${{ inputs.kernels }}]" >> conf.yaml
        echo "out_path: /tmp/report.yaml" >> conf.yaml
      
    - name: Run bpfvalidator
      shell: bash
      working-directory: ${{ github.action_path }}
      run:
        ./bpfvalidator --config conf.yaml

    - name: Set output
      id: store-outputs
      shell: bash
      run: echo "report=/tmp/report.yaml" >> $GITHUB_OUTPUT

    # we used a fixed version of the upload-artifact action
    - name: Upload report
      if: inputs.upload_report != ''
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: ${{ inputs.upload_report }}
        path: /tmp/report.yaml
